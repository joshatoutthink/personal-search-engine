{"digital-garden-0":{"content":"\u0000\u0000\u0000\u0001Bud1\u0000\u0000\u0010\u0000\u0000\u0000\u0008\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000a\u0000s\u0000d\u0000fdsclbool\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000dsclbool\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0008\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000 \u0000\u0000\u0000\u0001\u0000\u0000\u0000@\u0000\u0000\u0000\u0001\u0000\u0000\u0000\ufffd\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000\ufffd\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0008\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000\ufffd\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0008\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u000b\u0000\u0000\u0000E\u0000\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004DSDB\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\ufffd\u0000\u0000\u0000\u0001\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0008\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000 \u0000\u0000\u0000\u0000\u0001\u0000\u0000@\u0000\u0000\u0000\u0000\u0001\u0000\u0000\ufffd\u0000\u0000\u0000\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0008\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0001\u0000 \u0000\u0000\u0000\u0000\u0000\u0001\u0000@\u0000\u0000\u0000\u0000\u0000\u0001\u0000\ufffd\u0000\u0000\u0000\u0000\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0008\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001 \u0000\u0000\u0000\u0000\u0000\u0000\u0001@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000","heading":"","id":"digital-garden-0","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/.DS_Store","tokens":{"":6,"bud1asdfdsclbooldsclbool":1,"edsdb":1}},"digital-garden-1":{"content":"---\ntitle: JSDoc + Typescript + VScode = Match Made in Heaven\ndate: '2021-03-10T15:17:13.467Z'\ntags: ['Typescript', 'js', 'documentation', 'vscode']\n---\n\nJSDoc + Typescript make for the coolest tool tips in VScode. Below is a screenshot of a tool tip for a function that I wrote that explains perfectly what the function is and what it does. I'll never have to look back at that function to remember how use it.\n\n![vscode tool tip for a function I wrote that perfectly explains how to use the function](defineTypeFunctionToolTip.png)\n\nBy typing out the params and return type in Typescript you get the type safety from the TS compiler, but you also the type definitions in the tool tips ( ahhhmazing 😄 ). Combine that with a short description about what the function does or how to use the function and you have a beautiful well documented function with very little work.\n\nHere is an example of my Typescript + JSDoc function that produced the above tool tip.\n\n```ts\n/**\n * Returns the string of the name of the type of data that is passed in\n * @param data the value that is getting the type definition\n */\n\nexport function defineType(data: TJsonValue): JsonValueTypesAsStrings {\n  const primitive = typeof data\n\n  if (Array.isArray(data)) {\n    return 'array'\n  }\n  if (data == null) {\n    return 'null'\n  }\n\n  if (primitive == 'function') {\n    throw new TypeError('not a valid json type sorry')\n  }\n  if (primitive == 'symbol') {\n    throw new TypeError('not a valid json type sorry')\n  }\n  if (primitive == 'bigint') {\n    throw new TypeError('not a valid json type sorry')\n  }\n  if (primitive == 'undefined') {\n    throw new TypeError('no value was given')\n  }\n\n  return primitive\n}\n```\n","heading":"title: JSDoc + Typescript + VScode = Match Made in Heaven","id":"digital-garden-1","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/JSDoc-plus-Typescript/index.md","tokens":{"":35,"20210310t151713467z":1,"about":1,"above":1,"ahhhmazing":1,"also":1,"array":1,"arrayisarraydata":1,"back":1,"beautiful":1,"below":1,"bigint":1,"but":1,"by":1,"combine":1,"compiler":1,"const":1,"coolest":1,"data":4,"date":1,"definetypedata":1,"definition":1,"definitions":1,"description":1,"documentation":1,"documented":1,"does":2,"example":1,"explains":2,"export":1,"for":3,"from":1,"function":10,"functiondefinetypefunctiontooltippng":1,"get":1,"getting":1,"given":1,"have":2,"heaven":1,"here":1,"how":3,"i":2,"if":6,"ill":1,"is":5,"js":1,"jsdoc":3,"json":3,"jsonvaluetypesasstrings":1,"little":1,"look":1,"made":1,"make":1,"match":1,"my":1,"name":1,"never":1,"new":4,"null":2,"out":1,"param":1,"params":1,"passed":1,"perfectly":2,"primitive":6,"produced":1,"remember":1,"return":4,"returns":1,"safety":1,"screenshot":1,"short":1,"sorry":3,"string":1,"symbol":1,"tags":1,"that":8,"throw":4,"tip":3,"tips":2,"title":1,"tjsonvalue":1,"tool":5,"ts":2,"type":8,"typeerrorno":1,"typeerrornot":3,"typeof":1,"typescript":5,"typing":1,"undefined":1,"use":3,"valid":3,"value":2,"very":1,"vscode":4,"was":1,"well":1,"what":3,"with":2,"work":1,"wrote":2,"you":3}},"digital-garden-10":{"content":"---\ntitle: Electron Js Tips\ndate: '2020-09-24T14:10:29.579Z'\ntags: [js, desktop app, electronjs, tips]\n---\n\nElectron js is a way to make a desktop application using web technology + nodejs.\n\n## Example repo\n\n[bb-module-generator](https://github.com/joshatoutthink/bb-module-generator-electron.git)\n\n## Using React\n\nI use create react app. This obviously has some limitations, but it works pretty well.\nThe Main File the electron uses will need to live in public so that react wont ignore it when we build.\n","heading":"title: Electron Js Tips","id":"digital-garden-10","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/electron-js/index.md","tokens":{"":5,"20200924t141029579z":1,"app":2,"application":1,"bbmodulegeneratorhttpsgithubcomjoshatoutthinkbbmodulegeneratorelectrongit":1,"build":1,"but":1,"create":1,"date":1,"desktop":2,"electron":3,"electronjs":1,"example":1,"file":1,"i":1,"ignore":1,"is":1,"js":3,"limitations":1,"live":1,"main":1,"make":1,"need":1,"nodejs":1,"obviously":1,"pretty":1,"public":1,"react":3,"repo":1,"so":1,"some":1,"tags":1,"technology":1,"that":1,"this":1,"tips":2,"title":1,"use":1,"uses":1,"using":2,"way":1,"we":1,"web":1,"well":1,"when":1,"will":1,"wont":1,"works":1}},"digital-garden-11":{"content":"---\ntitle: Execute Binaries In a Aflred Workflow Script\ndate: '2020-08-24T15:33:41.173Z'\ntags: ['productivity', 'alfred', 'automation', 'scripts']\n---\n\nWhen you want to write a Alfred workflow, and use the command line commands `node` or the vscode command `code`, you have to tell the alfred script exactly where these binaries are. You could just add the full path to the binary in your script like so:\n\n```bash\n/usr/local/bin/node somefile.js\n```\n\nor could create an environment variable for the workflow.\n\nthere is a place to add env variables that will be available to your scripts. _example `$variable_name`_. You would add the path as the value of the environment variable. Then you could use it like so.\n\n```bash\n$node somefile.js\n```\n","heading":"title: Execute Binaries In a Aflred Workflow Script","id":"digital-garden-11","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/execute-binaries-in-aflred-script/index.md","tokens":{"":4,"20200824t153341173z":1,"add":3,"aflred":1,"alfred":3,"are":1,"as":1,"automation":1,"available":1,"bash":2,"be":1,"binaries":2,"binary":1,"code":1,"command":2,"commands":1,"could":3,"create":1,"date":1,"env":1,"environment":2,"exactly":1,"example":1,"execute":1,"for":1,"full":1,"have":1,"is":1,"just":1,"like":2,"line":1,"node":2,"path":2,"place":1,"productivity":1,"script":3,"scripts":2,"so":2,"somefilejs":2,"tags":1,"tell":1,"that":1,"there":1,"these":1,"title":1,"use":2,"usrlocalbinnode":1,"value":1,"variable":2,"variablename":1,"variables":1,"vscode":1,"want":1,"when":1,"where":1,"will":1,"workflow":3,"would":1,"write":1,"you":5,"your":2}},"digital-garden-12":{"content":"---\ntitle: Fancy Console Logs\ndate: '2021-05-06T13:44:40.027Z'\ntags: ['js', 'console', 'debugging']\n---\n\nYou can easily style console.logs by adding `%c` at the beginning of your log, and then add a second parameter to the log function that is a string containing the css styles\n\n```js\nconsole.log(\n  `%cIm going to look nice`,\n  `font-size:20px; background:#333; border-radius:4px;padding:10px;`\n)\n```\n\n![example log](example.png)\n\nThis will only work in the browser. If you need styles in node check out [this](/brain/colorful-console-logs-in-node/).\n","heading":"title: Fancy Console Logs","id":"digital-garden-12","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/fancy-console-logs/index.md","tokens":{"":4,"20210506t134440027z":1,"add":1,"adding":1,"background333":1,"beginning":1,"borderradius4pxpadding10px":1,"browser":1,"by":1,"c":1,"can":1,"check":1,"cim":1,"console":2,"consolelog":1,"consolelogs":1,"containing":1,"css":1,"date":1,"debugging":1,"easily":1,"example":1,"fancy":1,"fontsize20px":1,"function":1,"going":1,"if":1,"is":1,"js":2,"log":2,"logexamplepng":1,"logs":1,"look":1,"need":1,"nice":1,"node":1,"only":1,"out":1,"parameter":1,"second":1,"string":1,"style":1,"styles":2,"tags":1,"that":1,"this":1,"thisbraincolorfulconsolelogsinnode":1,"title":1,"will":1,"work":1,"you":2,"your":1}},"digital-garden-13":{"content":"---\ntitle: Notes On Rust From Frontend Masters Course\ndate: '2021-08-07T14:53:52.257Z'\ntags: ['rust', 'notes', 'frontend masters']\n---\n\nThese Are notes from the frontend master course on rust\n\n## Variables\n\nlet - is mutable variable\ncant even mutate objects unlike javascript\n\nlet mut varname is how you get mutable variables\n\ncan't change types even in mutable variable\n\n## Strings\n\n### Concat\n\nformat!(String) is how you do string interpolation.  or panic!(String), println!(\"{}, {}\", var, var2);\n\n## Floats: f64, f32, \n\nex 2.2\n\n## ints i8, i16, i32, i64, u8, u16, ...\n\nNo Decimal\ncant divide by 0 will panic\n\nalso char - its a valid unicode u32 \n\n## Booleans\ntrue , false \nworks with `as` if you want to go to a number\n\n`==` no triple `===`\n\n## Conditionals\n\n```\nif cats \u003c 1 {\n\t...\n}\n```\nthe predicate has to be a boolean no automatic coercion\n\n```rs\nlet varname = if x == 0 {\n\texpression\n} else {\n\texpression\n}; // \u003c- need that\n```\nthe above is an expression of course the whole snippet is a statement bc we are assigning it to varname\n\n## Coersion\n\nuse the `as` keyword for numbers\nusually goes small to big\n\n## Functions\n\nmust type args,\n\ntypeing the return value\n`-\u003e ReturnType` \n\n## Tuples `let tuple: (i32,i32,i32) = (0,12,3)`\n\nget index by dot notation tuple.1\n\nUnit is a empty tuple `()`\nfunctions always returns for functions that dont return a value they return a unit\n\ntuples cant have dynamic size at runtime\n\n## Structs `{}`\n\n```\nstruct Point {\n\tx:i64,\n\ty:i64,\n\tz:i64,\n}\nlet point = Point { x:5,y:6,z:2}\npoint.x // -\u003e 5\n```\n` Point { x,...} = point`\ncant change or add new fields just change the values\n\n## Arrays `[i32;3] = [11,123,53];`\n\nnot like in js\n\ncant change length inarrays\n\ncant mix type unlike tuples\n\narrays have iterator only collection that can be iterated\n```\nfor i in [1,2,3].iter() {\n\n}\n```\n\n## Memory\n\nlist of bits `01010101110110110111011`\n\nor  array of bytes (8bits) \nrust doesnt store anything about elements in memory just the value not meta data. this is how rust can be so fast\n\n## Pattern Matching and enums\n\n```\nenum Poops {\n\tGreen,\n\tSmushy,\n\tRunny\n}\n```\nnow you use it like\n```\nlet my_poop = Poops::Runny\nlet smell = match my_poop {\n\tPoops::Green {...},\n\tPoops::Smushy {...},\n\tPoops::Runny {...}\n}\n```\n\n## OTHER\n\n### Macros\n\nmacros code transfomation through a series of function calls a compile time.\nsyntax uses ! to signal its a macro not a function\n\n### Number type size\n- i8\n- f32\n\n\ndivide the number by 8 to get the number of bytes `32 bits is 4 bytes`\nbigger number more precise but slower program\n\nwhy does `x + 1` == ` return x+1;` becuase first is a expression; not a statement;\nstatement always ends in ;\n","heading":"title: Notes On Rust From Frontend Masters Course","id":"digital-garden-13","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/fm-rust-notes/index.md","tokens":{"":81,"0":2,"01010101110110110111011":1,"0123":1,"1":2,"1112353":1,"123iter":1,"20210807t145352257z":1,"22":1,"32":1,"4":1,"5":1,"8":1,"8bits":1,"about":1,"above":1,"add":1,"also":1,"always":2,"anything":1,"are":2,"args":1,"array":1,"arrays":2,"as":2,"assigning":1,"automatic":1,"bc":1,"be":3,"becuase":1,"big":1,"bigger":1,"bits":2,"boolean":1,"booleans":1,"but":1,"by":3,"bytes":3,"calls":1,"can":2,"cant":7,"cats":1,"change":4,"char":1,"code":1,"coercion":1,"coersion":1,"collection":1,"compile":1,"concat":1,"conditionals":1,"course":3,"data":1,"date":1,"decimal":1,"divide":2,"do":1,"does":1,"doesnt":1,"dont":1,"dot":1,"dynamic":1,"elements":1,"else":1,"empty":1,"ends":1,"enum":1,"enums":1,"even":2,"ex":1,"expression":4,"f32":2,"f64":1,"false":1,"fast":1,"fields":1,"first":1,"floats":1,"for":3,"formatstring":1,"from":2,"frontend":3,"function":2,"functions":3,"get":3,"go":1,"goes":1,"green":1,"have":2,"how":3,"i":1,"i16":1,"i32":1,"i323":1,"i32i32i32":1,"i64":1,"i8":2,"if":3,"inarrays":1,"index":1,"interpolation":1,"ints":1,"is":9,"iterated":1,"iterator":1,"its":2,"javascript":1,"js":1,"just":2,"keyword":1,"length":1,"let":7,"like":2,"list":1,"macro":1,"macros":2,"master":1,"masters":2,"match":1,"matching":1,"memory":2,"meta":1,"mix":1,"more":1,"must":1,"mut":1,"mutable":3,"mutate":1,"mypoop":2,"need":1,"new":1,"no":3,"not":4,"notation":1,"notes":3,"now":1,"number":5,"numbers":1,"objects":1,"on":2,"only":1,"other":1,"panic":1,"panicstring":1,"pattern":1,"point":5,"pointx":1,"poops":1,"poopsgreen":1,"poopsrunny":2,"poopssmushy":1,"precise":1,"predicate":1,"println":1,"program":1,"return":4,"returns":1,"returntype":1,"rs":1,"runny":1,"runtime":1,"rust":5,"series":1,"signal":1,"size":2,"slower":1,"small":1,"smell":1,"smushy":1,"snippet":1,"so":1,"statement":3,"store":1,"string":1,"strings":1,"struct":1,"structs":1,"syntax":1,"tags":1,"that":3,"these":1,"they":1,"this":1,"through":1,"time":1,"title":1,"transfomation":1,"triple":1,"true":1,"tuple":2,"tuple1":1,"tuples":3,"type":3,"typeing":1,"types":1,"u16":1,"u32":1,"u8":1,"unicode":1,"unit":2,"unlike":2,"use":2,"uses":1,"usually":1,"valid":1,"value":3,"values":1,"var":1,"var2":1,"variable":2,"variables":2,"varname":3,"want":1,"we":1,"whole":1,"why":1,"will":1,"with":1,"works":1,"x":3,"x1":1,"x5y6z2":1,"xi64":1,"yi64":1,"you":4,"zi64":1}},"digital-garden-14":{"content":"---\ntitle: hide scroll bars\ndate: '2021-10-22T13:45:29.324Z'\ntags: ['css']\n---\n\nWhen thins need to scroll but you want to hide that is scrolling you can hide the scroll bars.\n\n## Pure CSS (_webkit support needed_)\n\nCODE:\n\n```CSS\n::-webkit-scrollbar {\n    width: 0;  /* Remove scrollbar space */\n    background: transparent;  /* Optional: just make scrollbar invisible */\n}\n/* Optional: show position indicator in red */\n::-webkit-scrollbar-thumb {\n    background: #FF0000;\n}\n```\n\nWe are just hiding the visibility of theme\n\n## JS (_more support_)\n\nCODE\n\ncss needed\n\n```CSS\n.parent {// element needed to hide the scrollbar\n  overflow: hidden;\n  padding: 10px;\n  //this should have a width and height that cause scrolling\n}\n.child { // element that will scroll\n  margin: 0;\n  width: 100%;\n  height: 100%;\n  overflow: auto;\n  padding-right: 0px;\n}\n\n```\n\nJs needed\n\n```javascript\nconst parent = document.querySelector('.container')\nconst child = document.querySelector('p')\n\nconst scrollbarWidth = child.offsetWidth - child.clientWidth\n\nconst newWidth = scrollbarWidth + parent.getBoundingClientRect().width\n\n//add styles to hide the childs scroll bar behind parent\nchild.style.setProperty('width', `${newWidth}px`)\nchild.style.setProperty('padding-right', `${scrollbarWidth + 10}px`) // restore padding from the parent\n```\n","heading":"title: hide scroll bars","id":"digital-garden-14","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/hide-scroll-bars/index.md","tokens":{"":30,"0":2,"0px":1,"100":2,"10px":2,"20211022t134529324z":1,"add":1,"are":1,"auto":1,"background":2,"bar":1,"bars":2,"behind":1,"but":1,"can":1,"cause":1,"child":2,"childclientwidth":1,"childoffsetwidth":1,"childs":1,"childstylesetpropertypaddingright":1,"childstylesetpropertywidth":1,"code":2,"const":4,"css":5,"date":1,"documentqueryselectorcontainer":1,"documentqueryselectorp":1,"element":2,"ff0000":1,"from":1,"have":1,"height":2,"hidden":1,"hide":5,"hiding":1,"indicator":1,"invisible":1,"is":1,"javascript":1,"js":2,"just":2,"make":1,"margin":1,"more":1,"need":1,"needed":4,"newwidth":1,"newwidthpx":1,"optional":2,"overflow":2,"padding":2,"paddingright":1,"parent":4,"parentgetboundingclientrectwidth":1,"position":1,"pure":1,"red":1,"remove":1,"restore":1,"scroll":5,"scrollbar":3,"scrollbarwidth":3,"scrolling":2,"should":1,"show":1,"space":1,"styles":1,"support":2,"tags":1,"that":3,"theme":1,"thins":1,"this":1,"title":1,"transparent":1,"visibility":1,"want":1,"we":1,"webkit":1,"webkitscrollbar":1,"webkitscrollbarthumb":1,"when":1,"width":3,"will":1,"you":2}},"digital-garden-15":{"content":"---\ntitle: Upload and Loop Through a CSV file in php\ndate: '2020-08-25T15:22:22.100Z'\ntags: [php, upload files, CSV, read file]\n---\n\n### TLDR;\n\n```php\n$rows = array_map( 'str_getcsv', file( $_FILES['csv']['tmp_name'] ) );\n```\n\nWhen you need to import a large amount data, you might want to provide the ability to allow an upload of a csv file. Here is how you can do it.\n\n### Starting from the Frontend side.\n\nIm a big fan of not reloading the whole page just to submit a form, so we will use window.fetch to upload the file.\n\n```js\nconst form = document.querySelector(\n    'form'\n);\nif (!form) return;\nconst button = form.querySelector(\"button\");\nconst idleButtonText = button.innerText;\nform.addEventListener(\"submit\", sendCSVImport);\n\nasync function sendCSVImport(e) {\n  e.preventDefault();\n\n  const form = e.target;\n  button.innerText = \"Loading...\";\n\n  const csv = form.querySelector(\"[name='csvfile']\").files[0];\n  const formData = new FormData();\n  formData.append(\"csv\", csv);\n\n  const res = await fetch( URL, {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: formData,\n  })\n  .then((res) =\u003e res.json())\n  .then(res=\u003e console.log(res);\n\n```\n\nBasically we are preventing the default page reload so we can use ajax. Then we are creating a new [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData) object, and putting in the file from the file type input. Then we just send that right over the wire. The format of the file is binary.\n\n### On the PHP Backend (why you are probably here)\n\nWhat we basically are going to do is get the contents of the file and put each row in an array. and each row is an array of columns.\n\n```php\n$rows = array_map( 'str_getcsv', file( $_FILES['csv']['tmp_name'] ) );\n```\n\nPretty easy right. There are a lot of things that can be done that will make this better, and more performant, like reading the file as a stream. This however will work for most files.\n","heading":"title: Upload and Loop Through a CSV file in php","id":"digital-garden-15","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/loop-through-a-csv-php/index.md","tokens":{"":27,"20200825t152222100z":1,"ability":1,"ajax":1,"allow":1,"amount":1,"are":5,"array":2,"arraymap":2,"as":1,"async":1,"await":1,"backend":1,"basically":2,"be":1,"better":1,"big":1,"binary":1,"body":1,"button":1,"buttoninnertext":2,"can":3,"columns":1,"consolelogres":1,"const":7,"contents":1,"creating":1,"credentials":1,"csv":5,"data":1,"date":1,"default":1,"do":2,"documentqueryselector":1,"done":1,"each":2,"easy":1,"epreventdefault":1,"etarget":1,"fan":1,"fetch":1,"file":11,"files":2,"filescsvtmpname":2,"for":1,"form":5,"formaddeventlistenersubmit":1,"format":1,"formdata":3,"formdataappendcsv":1,"formdatahttpsdevelopermozillaorgenusdocswebapiformdataformdata":1,"formqueryselectorbutton":1,"formqueryselectornamecsvfilefiles0":1,"from":2,"frontend":1,"function":1,"get":1,"going":1,"here":2,"how":1,"however":1,"idlebuttontext":1,"if":1,"im":1,"import":1,"input":1,"is":4,"js":1,"just":2,"large":1,"like":1,"loading":1,"loop":1,"lot":1,"make":1,"method":1,"might":1,"more":1,"most":1,"need":1,"new":2,"not":1,"object":1,"on":1,"over":1,"page":2,"performant":1,"php":5,"post":1,"pretty":1,"preventing":1,"probably":1,"provide":1,"put":1,"putting":1,"read":1,"reading":1,"reload":1,"reloading":1,"res":1,"resjson":1,"return":1,"right":2,"row":2,"rows":2,"sameorigin":1,"send":1,"sendcsvimport":1,"sendcsvimporte":1,"side":1,"so":2,"starting":1,"stream":1,"strgetcsv":2,"submit":1,"tags":1,"that":3,"thenres":2,"there":1,"things":1,"this":2,"through":1,"title":1,"tldr":1,"type":1,"upload":4,"url":1,"use":2,"want":1,"we":6,"what":1,"when":1,"whole":1,"why":1,"will":3,"windowfetch":1,"wire":1,"work":1,"you":4}},"digital-garden-16":{"content":"---\ntitle: Parse Html From Ajax\ndate: '2020-08-07'\ntags: ['html', 'js', 'fetch']\n---\n\nHow to fetch html and parse only a peice of it\n\n```js\nfetch('/about')\n  .then(function(response) {\n    // The API call was successful!\n    return response.text()\n  })\n  .then(function(html) {\n    // Convert the HTML string into a document object\n    var parser = new DOMParser()\n    var doc = parser.parseFromString(html, 'text/html')\n\n    // Get the image file\n    var img = doc.querySelector('img')\n    console.log(img)\n  })\n  .catch(function(err) {\n    // There was an error\n    console.warn('Something went wrong.', err)\n  })\n```\n\nthis was taken from [gomakethings.com](https://gomakethings.com/getting-html-with-fetch-in-vanilla-js/)\n","heading":"title: Parse Html From Ajax","id":"digital-garden-16","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/parse-html-from-ajax/index.mdx","tokens":{"":16,"20200807":1,"ajax":1,"api":1,"call":1,"catchfunctionerr":1,"consolelogimg":1,"consolewarnsomething":1,"convert":1,"date":1,"doc":1,"docqueryselectorimg":1,"document":1,"domparser":1,"err":1,"error":1,"fetch":2,"fetchabout":1,"file":1,"from":2,"get":1,"gomakethingscomhttpsgomakethingscomgettinghtmlwithfetchinvanillajs":1,"how":1,"html":4,"image":1,"img":1,"into":1,"js":2,"new":1,"object":1,"only":1,"parse":2,"parser":1,"parserparsefromstringhtml":1,"peice":1,"responsetext":1,"return":1,"string":1,"successful":1,"tags":1,"taken":1,"texthtml":1,"thenfunctionhtml":1,"thenfunctionresponse":1,"there":1,"this":1,"title":1,"var":3,"was":3,"went":1,"wrong":1}},"digital-garden-17":{"content":"---\ntitle: Proper Way To Work With Viewport Units\ndate: '2021-01-05T13:50:24.179Z'\ntags: [js, css, mobile]\n---\n\nTo properly use vh units on the web because of safari we have to do some thing tricky due to safari's overlay ui.\n\nfirst add this js\n\n```js\n// Get the viewport height and multiple it by 1% to get a value for a vh unit\nlet vh = window.innerHeight * 0.01;\n// Then we set the value in the --vh custom property to the root of the document\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n```\n\nand then in your css\n```css\n:root {\n  --full-height: calc(var(--vh, 1vh) * 100);\n}\n```\n\nthis code came from a [css-tricks newsletter](https://css-tricks.com/newsletter/232-scroll-story/)","heading":"title: Proper Way To Work With Viewport Units","id":"digital-garden-17","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/proper-way-to-work-with-viewport-units/index.md","tokens":{"":11,"001":1,"1":1,"100":1,"1vh":1,"20210105t135024179z":1,"add":1,"because":1,"by":1,"calcvarvh":1,"came":1,"code":1,"css":3,"csstricks":1,"custom":1,"date":1,"do":1,"document":1,"documentdocumentelementstylesetpropertyvh":1,"due":1,"first":1,"for":1,"from":1,"fullheight":1,"get":2,"have":1,"height":1,"js":3,"let":1,"mobile":1,"multiple":1,"newsletterhttpscsstrickscomnewsletter232scrollstory":1,"on":1,"overlay":1,"proper":1,"properly":1,"property":1,"root":2,"safari":1,"safaris":1,"set":1,"some":1,"tags":1,"thing":1,"this":2,"title":1,"tricky":1,"ui":1,"unit":1,"units":2,"use":1,"value":2,"vh":4,"vhpx":1,"viewport":2,"way":1,"we":2,"web":1,"windowinnerheight":1,"with":1,"work":1,"your":1}},"digital-garden-18":{"content":"---\ntitle: Screen Wake Lock\ntags: [browser, js]\ndate: '2020-08-13'\n---\n\nTo get the request body of a request in php you\n\n```js\nfunction initDeviceCaffeine(mountingSelector) {\n  const mountNode = document.querySelector(mountingSelector)\n\n  if (!mountNode) return\n\n  const toggleEl = createToggle()\n  addWakeLockHandler(toggleEl, 'change')\n\n  mountNode.appendChild(toggleEl)\n}\n\nfunction createToggle() {\n  const toggle = document.createElement('div')\n  toggle.classList.add('wake-lock-toggle')\n  toggle.innerHTML = `\u003clabel class=\"toggle__label\"\u003e\n        \u003cinput type=\"checkbox\" name=\"\" id=\"\" class=\"toggle__checkbox\" /\u003e\n        \u003cdiv class=\"toggle__wrapper\"\u003e\n          \u003cdiv class=\"toggle__bg\"\u003e\u003c/div\u003e\n          \u003cdiv class=\"toggle__switch\"\u003e\u003c/div\u003e\n        \u003c/div\u003e\n      \u003c/label\u003e`\n\n  return toggle\n}\n\nfunction addWakeLockHandler(el, event) {\n  let wakeLock\n  el.addEventListener(event, async function(e) {\n    if (e.target.checked) {\n      wakeLock = await navigator.wakeLock.request('screen').then(res =\u003e res)\n      //if some other force stops this, give user feed back\n      wakeLock.onrelease = unCheck\n    } else {\n      wakeLock.release()\n    }\n  })\n}\n\nfunction unCheck(e) {\n  e.target.checked = false\n}\n\ninitDeviceCaffeine('.place-toggle')\n```\n\n```css\n.wake-lock-toggle {\n  position: relative;\n  display: inline-block;\n  font-size: 16px;\n  box-sizing: border-box;\n}\n.wake-lock-toggle * {\n  box-sizing: inherit;\n}\n.wake-lock-toggle input {\n  width: 0;\n  height: 0;\n  display: none;\n}\n.wake-lock-toggle label {\n  display: inline-flex;\n  align-items: center;\n}\n.wake-lock-toggle input:checked ~ .toggle__wrapper {\n  box-shadow: 0 0 0 2px #44da60;\n}\n.wake-lock-toggle input:checked ~ .toggle__wrapper .toggle__switch {\n  right: 0;\n}\n.wake-lock-toggle input:checked ~ .toggle__wrapper .toggle__bg {\n  border: 1px solid #44da60;\n  transition: none;\n  background: #44da60;\n}\n.wake-lock-toggle input:checked ~ .toggle__wrapper .toggle__bg:after {\n  transition-delay: 0.05s, 0s;\n  opacity: 0;\n  transform: scale(0);\n}\n\n.toggle__wrapper {\n  margin-left: 1em;\n  position: relative;\n  height: 2em;\n  width: 3.3em;\n  overflow: visible;\n  border-radius: 2.5em;\n  box-shadow: 0 0 0 2px #dfdfdf;\n}\n\n.toggle__bg {\n  overflow: hidden;\n  position: absolute;\n  z-index: 1;\n  width: 100%;\n  background: transparent;\n  height: 100%;\n  border-radius: 2.5em;\n  transition: all 0s linear 0.2s;\n}\n.toggle__bg:after {\n  transition: all 0.2s linear;\n  transition-property: transform, opacity;\n  transition-delay: 0s, 0.02s;\n  content: '';\n  position: absolute;\n  border-radius: inherit;\n  width: 103%;\n  height: 103%;\n  background: #efeff9;\n  top: 0;\n  left: 0;\n  z-index: 2;\n  transform-origin: 50% 50%;\n  opacity: 1;\n}\n\n.toggle__switch {\n  position: absolute;\n  z-index: 200;\n  border-radius: 50%;\n  background: white;\n  width: 2em;\n  height: 100%;\n  box-shadow: 0.5px 1px 2px #dedede;\n  right: calc(100% - 2em);\n  transition: all 0.15s cubic-bezier(0.5, 1, 0.5, 1);\n}\n```\n","heading":"title: Screen Wake Lock","id":"digital-garden-18","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/screenWake/index.mdx","tokens":{"":58,"0":12,"002s":1,"005s":1,"015s":1,"02s":2,"05":1,"05px":1,"0s":3,"1":4,"100":3,"103":2,"16px":1,"1em":1,"1px":2,"2":1,"200":1,"20200813":1,"25em":2,"2em":3,"2px":3,"33em":1,"44da60":3,"50":3,"absolute":3,"addwakelockhandlerel":1,"addwakelockhandlertoggleel":1,"alignitems":1,"all":3,"async":1,"await":1,"back":1,"background":4,"body":1,"border":1,"borderbox":1,"borderradius":4,"boxshadow":3,"boxsizing":2,"browser":1,"calc100":1,"center":1,"change":1,"classtogglebgdiv":1,"classtogglecheckbox":1,"classtogglelabel":1,"classtoggleswitchdiv":1,"classtogglewrapper":1,"const":3,"content":1,"createtoggle":2,"css":1,"cubicbezier05":1,"date":1,"dedede":1,"dfdfdf":1,"display":3,"div":4,"documentcreateelementdiv":1,"documentqueryselectormountingselector":1,"efeff9":1,"eladdeventlistenerevent":1,"else":1,"etargetchecked":2,"event":1,"false":1,"feed":1,"fontsize":1,"force":1,"function":4,"functione":1,"get":1,"give":1,"height":5,"hidden":1,"id":1,"if":3,"inherit":2,"initdevicecaffeinemountingselector":1,"initdevicecaffeineplacetoggle":1,"inlineblock":1,"inlineflex":1,"input":2,"inputchecked":4,"js":2,"label":3,"left":1,"let":1,"linear":2,"lock":1,"marginleft":1,"mountnode":2,"mountnodeappendchildtoggleel":1,"name":1,"navigatorwakelockrequestscreenthenres":1,"none":2,"opacity":3,"other":1,"overflow":2,"php":1,"position":5,"relative":2,"request":2,"res":1,"return":2,"right":2,"scale0":1,"screen":1,"solid":1,"some":1,"stops":1,"tags":1,"this":1,"title":1,"toggle":2,"togglebg":2,"togglebgafter":2,"toggleclasslistaddwakelocktoggle":1,"toggleel":1,"toggleinnerhtml":1,"toggleswitch":2,"togglewrapper":5,"top":1,"transform":2,"transformorigin":1,"transition":4,"transitiondelay":2,"transitionproperty":1,"transparent":1,"typecheckbox":1,"uncheck":1,"unchecke":1,"user":1,"visible":1,"wake":1,"wakelock":2,"wakelockonrelease":1,"wakelockrelease":1,"wakelocktoggle":8,"white":1,"width":5,"you":1,"zindex":3}},"digital-garden-19":{"content":"---\ntitle: Scroll Timeline Animation\ndate: '2021-05-10T13:23:08.961Z'\ntags: ['css', 'no js', 'animation']\n---\n\nYou can create scroll animations based on the scroll position with just css. Theres a css property called animation-timeline that works a lot like the animation property.\n\n```css\n.element-to-show {\n  animation: 1s linear both show;\n  animation-timeline: show-timeline;\n}\n\n@keyframes show {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@scroll-timeline show-timeline {\n  time-range: 1s;\n}\n```\n\nThis feature is still really experimental as of writing this. [Can I use data](https://caniuse.com/?search=animation-timeline)\nShould use the `@supports` rule to guard it.\n\n```css\n@supports (animation-timeline: works) {\n  // stuff\n}\n```\n","heading":"title: Scroll Timeline Animation","id":"digital-garden-19","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/scroll-timeline-animation/index.md","tokens":{"":17,"0":1,"1":1,"1s":2,"20210510t132308961z":1,"animation":4,"animations":1,"animationtimeline":3,"as":1,"based":1,"both":1,"called":1,"can":2,"create":1,"css":5,"datahttpscaniusecomsearchanimationtimeline":1,"date":1,"elementtoshow":1,"experimental":1,"feature":1,"from":1,"guard":1,"i":1,"is":1,"js":1,"just":1,"keyframes":1,"like":1,"linear":1,"lot":1,"no":1,"on":1,"opacity":2,"position":1,"property":2,"really":1,"rule":1,"scroll":3,"scrolltimeline":1,"should":1,"show":2,"showtimeline":2,"still":1,"stuff":1,"supports":2,"tags":1,"that":1,"theres":1,"this":2,"timeline":1,"timerange":1,"title":1,"use":2,"with":1,"works":2,"writing":1,"you":1}},"digital-garden-2":{"content":"---\ntitle: Get The Request Body of JSON in PHP\ntags: [php, api, json]\ndate: '2020-07-26'\n---\n\nTo get the request body of a request in php you\n\n```php\n  $json = file_get_contents('php://input');\n  $data = json_decode($json);\n```\n\nthe `$data` variable will contain the JSON.\n","heading":"title: Get The Request Body of JSON in PHP","id":"digital-garden-2","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/Php-JSON-body/index.mdx","tokens":{"":5,"20200726":1,"api":1,"body":2,"contain":1,"data":2,"date":1,"filegetcontentsphpinput":1,"get":2,"json":4,"jsondecodejson":1,"php":4,"request":3,"tags":1,"title":1,"variable":1,"will":1,"you":1}},"digital-garden-20":{"content":"---\ntitle: How to create a simple hmr server\ndate: '2021-01-02'\n\ntags: ['websockets', 'js', 'productivity']\n---\n\nA simple node websocket server that runs fs.watch on a list of files then sends a message to the client causeing the page to reload\n\n## Steps\n\n1. Include a script in the markup that opens a connection to a websocket server.\n   ```js\n   window.addEventListener('DOMContentLoaded', function() {\n     const ws = new WebSocket('ws://localhost:7878')\n     ws.onmessage = function(e) {\n       if (e.data == 'reload') {\n         window.location.href = window.location.href\n       }\n     }\n   })\n   ```\n2. install websocket node library\n   `npm -i ws` or `yarn add ws`\n3. create a js file with this script\n\n```js\nconst fs = require('fs')\nconst Websocket = require('ws')\n\nconst wss = new Websocket.Server({ port: 7878 })\n\nwss.on('connection', watchFiles)\nfunction watchFiles(ws) {\n  fs.readdir('input', { encoding: 'utf-8' }, (err, files) =\u003e {\n    files.forEach(file =\u003e {\n      const watch = watchFactory(() =\u003e {\n        ws.send('reload')\n      })\n      watch(`input/${file}`)\n    })\n  })\n}\nfunction watchFactory(cb) {\n  let isActive = false // state so the event function only fires once\n  return fileName =\u003e {\n    fs.watch(fileName, { encoding: 'utf8' }, function listener(\n      event,\n      fileName\n    ) {\n      if (fileName) {\n        if (!isActive) {\n          cb()\n        }\n        isActive = !isActive //toggles boolean\n      }\n    })\n  }\n}\n```\n\nBasically the websockets.onConnection event listener needs to loop through a list of files to watch, and fs.watch them. Once the file is changed the event is fired and the listener for this function sends a websocket message that the client is listening for and once it receives this message it will reload the page\n","heading":"title: How to create a simple hmr server","id":"digital-garden-20","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/simple-hmr-server/index.mdx","tokens":{"":50,"1":1,"2":1,"20210102":1,"3":1,"7878":1,"add":1,"basically":1,"boolean":1,"causeing":1,"cb":1,"changed":1,"client":2,"connection":1,"const":5,"create":2,"date":1,"edata":1,"encoding":2,"err":1,"event":4,"false":1,"file":2,"filename":3,"files":3,"filesforeachfile":1,"fired":1,"fires":1,"for":2,"fs":1,"fsreaddirinput":1,"fswatch":2,"fswatchfilename":1,"function":6,"functione":1,"hmr":1,"how":1,"i":1,"if":3,"include":1,"install":1,"is":3,"isactive":4,"js":4,"let":1,"library":1,"list":2,"listener":3,"listening":1,"loop":1,"markup":1,"message":3,"needs":1,"new":2,"node":2,"npm":1,"on":1,"once":3,"only":1,"opens":1,"page":2,"port":1,"productivity":1,"receives":1,"reload":3,"requirefs":1,"requirews":1,"return":1,"runs":1,"script":2,"sends":2,"server":3,"simple":2,"so":1,"state":1,"steps":1,"tags":1,"that":3,"them":1,"this":3,"through":1,"title":1,"toggles":1,"utf8":2,"watch":2,"watchfactory":1,"watchfactorycb":1,"watchfiles":1,"watchfilesws":1,"watchinputfile":1,"websocket":5,"websockets":1,"websocketserver":1,"websocketsonconnection":1,"websocketwslocalhost7878":1,"will":1,"windowaddeventlistenerdomcontentloaded":1,"windowlocationhref":2,"with":1,"ws":3,"wsonmessage":1,"wss":1,"wssendreload":1,"wssonconnection":1,"yarn":1}},"digital-garden-21":{"content":"---\ntitle: A quick reference of git commit types\ndate: '2021-06-17T13:15:11.769Z'\ntags: ['git']\n---\n\nHaving a defined convention of git commit message structure is really helpful, when reading git history or understanding what a pull request encompasses. A popular convention is to label the message with a scope. Here is a list of popular types in commit messages with explanation.\n\n## Types of Commits:\n\n| Label         | description                                             |\n| ------------- | ------------------------------------------------------- |\n| **feat:**     | The new feature being added to a particular application |\n| **fix:**      | A bug fix (this correlates with PATCH in SemVer)        |\n| **style:**    | Feature and updates related to styling                  |\n| **refactor:** | Refactoring a specific section of the codebase          |\n| **test:**     | Everything related to testing                           |\n| **docs:**     | Everything related to documentation                     |\n| **chore:**    | Regular code maintenance                                |\n\n_this list was taken from this [blog post](https://medium.com/swlh/writing-better-commit-messages-9b0b6ff60c67#49fc) by Apurva Jain_, which goes into more detail about structured commit messages.\n","heading":"title: A quick reference of git commit types","id":"digital-garden-21","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/types-of-commits/index.md","tokens":{"":32,"20210617t131511769z":1,"about":1,"added":1,"application":1,"apurva":1,"being":1,"blog":1,"bug":1,"by":1,"chore":1,"code":1,"codebase":1,"commit":4,"commits":1,"convention":2,"correlates":1,"date":1,"defined":1,"description":1,"detail":1,"docs":1,"documentation":1,"encompasses":1,"everything":2,"explanation":1,"feat":1,"feature":2,"fix":2,"from":1,"git":4,"goes":1,"having":1,"helpful":1,"here":1,"history":1,"into":1,"is":3,"jain":1,"label":2,"list":2,"maintenance":1,"message":2,"messages":2,"more":1,"new":1,"particular":1,"patch":1,"popular":2,"posthttpsmediumcomswlhwritingbettercommitmessages9b0b6ff60c6749fc":1,"pull":1,"quick":1,"reading":1,"really":1,"refactor":1,"refactoring":1,"reference":1,"regular":1,"related":3,"request":1,"scope":1,"section":1,"semver":1,"specific":1,"structure":1,"structured":1,"style":1,"styling":1,"tags":1,"taken":1,"test":1,"testing":1,"this":3,"title":1,"types":3,"understanding":1,"updates":1,"was":1,"what":1,"when":1,"which":1,"with":3}},"digital-garden-22":{"content":"---\ntitle: Using wp cli to export remote databases.\ndate: '2021-02-04T17:02:44.425Z'\ntags: ['wp', 'mysql', 'databases', 'linux']\n---\n\nssh in\ncd to wp dir\nrun  `wp db export --add-drop-table`\nshould create a .sql file\ncopy paste file name and location in remote server\nrun `scp username@serverlocation:/path/to/file.sql ~/location/on/local/`\nand thats it.","heading":"title: Using wp cli to export remote databases.","id":"digital-garden-22","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/use-wp-cli-db/index.md","tokens":{"":2,"20210204t170244425z":1,"adddroptable":1,"cd":1,"cli":1,"copy":1,"create":1,"databases":2,"date":1,"db":1,"dir":1,"export":2,"file":2,"linux":1,"location":1,"locationonlocal":1,"mysql":1,"name":1,"paste":1,"remote":2,"run":2,"scp":1,"server":1,"should":1,"sql":1,"ssh":1,"tags":1,"thats":1,"title":1,"usernameserverlocationpathtofilesql":1,"using":1,"wp":4}},"digital-garden-23":{"content":"---\ntitle: Working with vanilla js and Wordpress ajax\ndate: '2020-08-03'\ntags: ['wp', 'js', 'fetch']\n---\n\nHow to use fetch with wordpresses ajax system\n\n```js\nfetch(`${WP.ajaxUrl}`, {\n  method: 'POST',\n  mode: 'cors',\n  credentials: 'same-origin', // include, *same-origin, omit\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n  },\n  body: toQueryString(data),\n}).then(res =\u003e console.log(res))\n\nfunction toQueryString(data) {\n  const urlSearhParams = new URLSearchParams(data)\n  const queryString = urlSearhParams.toString()\n  return queryString\n}\n```\n","heading":"title: Working with vanilla js and Wordpress ajax","id":"digital-garden-23","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/vanilla-js-wp-ajax/index.mdx","tokens":{"":12,"20200803":1,"ajax":2,"applicationxwwwformurlencoded":1,"body":1,"charsetutf8":1,"consolelogres":1,"const":2,"contenttype":1,"cors":1,"credentials":1,"date":1,"fetch":2,"fetchwpajaxurl":1,"function":1,"headers":1,"how":1,"include":1,"js":3,"method":1,"mode":1,"new":1,"omit":1,"post":1,"querystring":2,"return":1,"sameorigin":2,"system":1,"tags":1,"thenres":1,"title":1,"toquerystringdata":2,"urlsearchparamsdata":1,"urlsearhparams":1,"urlsearhparamstostring":1,"use":1,"vanilla":1,"with":2,"wordpress":1,"wordpresses":1,"working":1,"wp":1}},"digital-garden-24":{"content":"---\ntitle: Add style if shortcode is in the content\ndate: '2021-05-07T14:38:11.045Z'\ntags: ['wp', 'shortcodes', 'snippet']\n---\n\nAdd styles for your shortcode only if the shortcode is in the content.\n\n```php\n\u003c?php\nadd_action('wp_enqueue_scripts', 'shortcode_enqueue_assets');\nfunction shortcode_enqueue_assets(){\n\n  global $post;\n  if( is_a( $post, 'WP_Post' ) \u0026\u0026 has_shortcode( $post-\u003epost_content, 'shortcode_name') ) {\n\n    wp_enqueue_script('short-code-scripts', THEME_URL . 'public/bundle.js',array(), '1.00', false);\n    wp_enqueue_style('short-code-styles', THEME_URL . 'public/bundle.css',array(),'1.00', 'all');\n  }\n}\n```\n","heading":"title: Add style if shortcode is in the content","id":"digital-garden-24","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/wp-add-style-if-shortcode/index.md","tokens":{"":11,"100":1,"20210507t143811045z":1,"add":2,"addactionwpenqueuescripts":1,"all":1,"content":2,"date":1,"false":1,"for":1,"function":1,"global":1,"hasshortcode":1,"if":3,"is":2,"isa":1,"only":1,"php":2,"post":2,"postpostcontent":1,"publicbundlecssarray100":1,"publicbundlejsarray":1,"shortcode":3,"shortcodeenqueueassets":2,"shortcodename":1,"shortcodes":1,"snippet":1,"style":1,"styles":1,"tags":1,"themeurl":2,"title":1,"wp":1,"wpenqueuescriptshortcodescripts":1,"wpenqueuestyleshortcodestyles":1,"wppost":1,"your":1}},"digital-garden-25":{"content":"---\ntitle: writing and executing long linux commands\ndate: '2021-03-15T14:17:54.751Z'\ntags: [linux, bash]\n---\n\nSome times you need to write a long and complicated linux command or script. It may not be worth writing a whole executable script for it, but its too long to just write in your terminal. Linux gives a way to write a command in an text editor, and then on save execute the script in the terminal.\n\n## The Command is `Ctrl + x + e`\n\nHitting the above shortcut will open up vim or your default text editor, and will allow you to type your command save and then it will execute your command.\n\n## Editing long commands after execution.\n\nIf you wrote a command but it had a typo, you can run the `fc` command and it will open the last executed command in a text editor and allow you to edit the command. After saving it will run the command again.\n","heading":"title: writing and executing long linux commands","id":"digital-garden-25","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/writing-and-executing-long-linux-commands/index.md","tokens":{"":6,"20210315t141754751z":1,"above":1,"after":2,"again":1,"allow":2,"bash":1,"be":1,"but":2,"can":1,"command":10,"commands":2,"complicated":1,"ctrl":1,"date":1,"default":1,"e":1,"edit":1,"editing":1,"editor":3,"executable":1,"execute":2,"executed":1,"executing":1,"execution":1,"fc":1,"for":1,"gives":1,"had":1,"hitting":1,"if":1,"is":1,"its":1,"just":1,"last":1,"linux":4,"long":4,"may":1,"need":1,"not":1,"on":1,"open":2,"run":2,"save":2,"saving":1,"script":3,"shortcut":1,"some":1,"tags":1,"terminal":2,"text":3,"times":1,"title":1,"too":1,"type":1,"typo":1,"up":1,"vim":1,"way":1,"whole":1,"will":5,"worth":1,"write":3,"writing":2,"wrote":1,"x":1,"you":5,"your":4}},"digital-garden-26":{"content":"---\ntitle: Zustand + Immerjs creates a great state management library\ndate: '2020-09-24T14:30:29.510Z'\ntags: [react, state-management]\n---\n\n[Zustand](https://github.com/pmndrs/zustand) is a state management library (primarily used for react, although you can use it with vanilla js) that makes it really simple to have a global store. You don't have to wrap your app in a context, and it is really flexible.\n\n```js\nimport create from 'zustand'\n\nconst useStore = create(set =\u003e ({\n  bears: 0,\n  increasePopulation: () =\u003e set(state =\u003e ({ bears: state.bears + 1 })),\n  removeAllBears: () =\u003e set({ bears: 0 }),\n}))\n```\n\n## Making immutable code easy with immerjs\n\n[Immerjs](https://immerjs.github.io/immer/docs/introduction) allows you to work in a immutable way but use mutable patterns.\n\n```js\nconst a = [1, 2, 3]\na.push(4)\n```\n\nThis is a mutable pattern. We are mutating the variable a. In React, and in general this is not a great practice, but this code is very simple and readable. Immerjs allows us to use to write simple code while maintaining the safety of immutable code.\n\n```js\nimport produce from 'immer'\n\nconst baseState = [\n  {\n    todo: 'Learn typescript',\n    done: true,\n  },\n  {\n    todo: 'Try immer',\n    done: false,\n  },\n]\n\nconst nextState = produce(baseState, draftState =\u003e {\n  draftState.push({ todo: 'Tweet about it' })\n  draftState[1].done = true\n})\n```\n\n## Zustand + Immerjs for easy state management in react\n\nCombining these two libraries makes for a really easy and great State Management experience in react\n\n```js\nimport create from 'zustand'\nimport produce from 'immer'\n\nconst useStore = create(set =\u003e ({\n  lush: { forrest: { contains: { a: 'bear' } } },\n  set: fn =\u003e set(produce(fn)),\n}))\n\nconst set = useStore(state =\u003e state.set)\nset(state =\u003e {\n  state.lush.forrest.contains = null\n})\n```\n","heading":"title: Zustand + Immerjs creates a great state management library","id":"digital-garden-26","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/zustand-and-immerjs/index.md","tokens":{"":54,"0":2,"1":2,"2":1,"20200924t143029510z":1,"3":1,"about":1,"allows":2,"although":1,"app":1,"apush4":1,"are":1,"basestate":1,"bear":1,"bears":3,"but":2,"can":1,"code":4,"combining":1,"const":6,"contains":1,"context":1,"create":2,"creates":1,"createset":2,"date":1,"done":2,"dont":1,"draftstate":1,"draftstate1done":1,"draftstatepush":1,"easy":3,"experience":1,"false":1,"flexible":1,"fn":1,"for":3,"forrest":1,"from":4,"general":1,"global":1,"great":3,"have":2,"immer":3,"immerjs":4,"immerjshttpsimmerjsgithubioimmerdocsintroduction":1,"immutable":3,"import":4,"increasepopulation":1,"is":5,"js":5,"learn":1,"libraries":1,"library":2,"lush":1,"maintaining":1,"makes":2,"making":1,"management":4,"mutable":2,"mutating":1,"nextstate":1,"not":1,"null":1,"pattern":1,"patterns":1,"practice":1,"primarily":1,"produce":2,"producebasestate":1,"react":5,"readable":1,"really":3,"removeallbears":1,"safety":1,"set":3,"setproducefn":1,"setstate":2,"simple":3,"state":4,"statebears":1,"statelushforrestcontains":1,"statemanagement":1,"stateset":1,"store":1,"tags":1,"that":1,"these":1,"this":3,"title":1,"todo":3,"true":2,"try":1,"tweet":1,"two":1,"typescript":1,"us":1,"use":3,"used":1,"usestore":2,"usestorestate":1,"vanilla":1,"variable":1,"very":1,"way":1,"we":1,"while":1,"with":2,"work":1,"wrap":1,"write":1,"you":3,"your":1,"zustand":4,"zustandhttpsgithubcompmndrszustand":1}},"digital-garden-3":{"content":"---\ntitle: How to Quick and Easy Redirect In Wordpress With Cookies\ndate: '2020-08-11'\ntags: ['php', 'wp', 'cookies', 'redirect']\n---\n\nThis is a super simple snippet that redirects a user and gives them a cookie so it only happens once per user\n\n```php\nadd_action( 'template_redirect', function () {\n\tif ( is_front_page() \u0026\u0026 !isset($_COOKIE['seen_splash_page']) ) {\n\t\tsetcookie('seen_splash_page', true, time() + (86400 * 365 * 2), \"/\"); // 2 years\n        wp_redirect( home_url( '/wp-admin/' ) );\n        die;\n    }\n} );\n```\n","heading":"title: How to Quick and Easy Redirect In Wordpress With Cookies","id":"digital-garden-3","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/WPRedirect/index.mdx","tokens":{"":19,"2":2,"20200811":1,"365":1,"86400":1,"addaction":1,"cookie":1,"cookies":2,"date":1,"die":1,"easy":1,"function":1,"gives":1,"happens":1,"homeurl":1,"how":1,"if":1,"is":1,"isfrontpage":1,"issetcookieseensplashpage":1,"once":1,"only":1,"per":1,"php":2,"quick":1,"redirect":2,"redirects":1,"setcookieseensplashpage":1,"simple":1,"snippet":1,"so":1,"super":1,"tags":1,"templateredirect":1,"that":1,"them":1,"this":1,"time":1,"title":1,"true":1,"user":2,"with":1,"wordpress":1,"wp":1,"wpadmin":1,"wpredirect":1,"years":1}},"digital-garden-4":{"content":"---\ntitle: Adding and Customizing Gatsby Graphql Schema\ndate: '2020-09-01T18:10:58.268Z'\ntags: ['graphql', 'gatsby']\n---\n\nFor more in depth information go to: [Gatsby Docs on schema customization](https://www.gatsbyjs.com/docs/schema-customization/)\n\nThere are A bunch of ways to edit or add to the Graphql schema.  The two ways that I have found easiest are using the `createResolvers` api, and the `onCreateNode` api and `createNodeField` function to add fields to existing nodes. Depending on where and, and how the nodes were pulled in depicts which api I use.\n\n### Third Party API\n\nIf the Nodes were created from a third party graphql schema _(github)_, then our options are smaller and our lives are a little harder.\n\nThe easiest way I have found is just customizing the Type with the `createResolvers` api.  All you need to do is create an object with keys of the Types of the object you wish to add fields to or change, with all the resolvers or that the fields will use, and then add that object to the `createResolvers()` function. This will then add the fields the type in the schema. \n\n```js\nexports.createResolvers = ({ createResolvers }) =\u003e {\n  const resolvers = {\n    GitHub_Gist: {\n      description: {\n        resolve: (source, args, context, info) =\u003e {\n          return source.description \u0026\u0026 source.description.toLowerCase()\n        },\n      },\n      title: {\n        type: 'String',\n        resolve: source =\u003e {\n          return source.files[0].name\n        },\n      },\n    }\n  }\n\n  createResolvers(resolvers)\n}\n```\nThis will change the description to be all lowercase (not sure why you would want to), and will add a title property to the gist that is based on the first file name.  \n\n__one thing to note:__ In order for title to be able to be used, you have to pull in the `files.name` fields, because if we don't gatsby wont be able to use it in our resolver.\n\n\n### Gatsby Graphql Schema \n\nIf the nodes have a `internal.type` our lives are made so much easier. We can use the method mentioned above, and there are even ways around having to query fields that are used in our custom resolvers.\n\n```js\nconst resolvers = {\n  Frontmatter: {\n    author: {\n      resolve(source, args, context, info) {\n        return context.nodeModel.getNodeById({\n          id: source.author,\n          type: \"AuthorJson\",\n        })\n      },\n    },\n  },\n}\ncreateResolvers(resolver)\n```\nThe Context Parameter has some methods attached to it which allows you to run queries with in the resolver. More information can be found here: [Accessing Gatsby's data store from field resolvers](https://www.gatsbyjs.com/docs/schema-customization/#accessing-gatsbys-data-store-from-field-resolvers).\n\nWhile that method certainly works, there is a simpler way to do it (at least I think so).\n\nUsing the `onCreateNode` api, which runs when a new gatsby node is created, we can add fields to the node.\n\n```js\nexports.onCreateNode = ({ node, actions, getNode }) =\u003e {\n  const { createNodeField } = actions\n\n  if (node.internal.type === `Mdx`) {\n    const value = createFilePath({ node, getNode })\n    createNodeField({\n      name: `slug`,\n      node,\n      value,\n    })\n\n  }\n}\n```\nWe basically check to see if the node that was created was the correct type, and if it is we run the function `createNodeField()` and give it our options. The one Caveat about this way is that the fields created are under the property fields. Not the biggest deal but it is something to note.\n\n###  Thats it.\nThere is more information on the [Gatsby Docs](https://www.gatsbyjs.com/docs/)\n\nalso [jason lengstorf has a bunch of videos](https://www.youtube.com/playlist?list=PLz8Iz-Fnk_eQLjd3BXEcWHCpmFAadA4Te)\n\n","heading":"title: Adding and Customizing Gatsby Graphql Schema","id":"digital-garden-4","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/adding-fields-to-gatsby-schema/index.md","tokens":{"":55,"20200901t181058268z":1,"able":2,"about":1,"above":1,"accessing":1,"actions":2,"add":7,"adding":1,"all":3,"allows":1,"also":1,"api":6,"are":8,"args":2,"around":1,"attached":1,"author":1,"authorjson":1,"based":1,"basically":1,"be":5,"because":1,"biggest":1,"bunch":2,"but":1,"can":3,"caveat":1,"certainly":1,"change":2,"check":1,"const":4,"context":3,"contextnodemodelgetnodebyid":1,"correct":1,"create":1,"created":4,"createfilepath":1,"createnodefield":4,"createresolvers":4,"createresolversresolver":1,"createresolversresolvers":1,"custom":1,"customizationhttpswwwgatsbyjscomdocsschemacustomization":1,"customizing":2,"data":1,"date":1,"deal":1,"depending":1,"depicts":1,"depth":1,"description":2,"do":2,"docs":1,"docshttpswwwgatsbyjscomdocs":1,"dont":1,"easier":1,"easiest":2,"edit":1,"even":1,"existing":1,"exportscreateresolvers":1,"exportsoncreatenode":1,"field":1,"fields":9,"file":1,"filesname":1,"first":1,"for":2,"found":3,"from":2,"frontmatter":1,"function":3,"gatsby":7,"gatsbys":1,"getnode":2,"gist":1,"github":1,"githubgist":1,"give":1,"go":1,"graphql":5,"harder":1,"have":4,"having":1,"here":1,"how":1,"i":4,"id":1,"if":6,"info":2,"information":3,"internaltype":1,"is":9,"jason":1,"js":3,"just":1,"keys":1,"least":1,"lengstorf":1,"little":1,"lives":2,"lowercase":1,"made":1,"mdx":1,"mentioned":1,"method":2,"methods":1,"more":3,"much":1,"name":2,"need":1,"new":1,"node":6,"nodeinternaltype":1,"nodes":4,"not":2,"note":2,"object":3,"on":4,"oncreatenode":2,"one":2,"options":2,"order":1,"our":6,"parameter":1,"party":2,"property":2,"pull":1,"pulled":1,"queries":1,"query":1,"resolve":2,"resolver":2,"resolvers":4,"resolvershttpswwwgatsbyjscomdocsschemacustomizationaccessinggatsbysdatastorefromfieldresolvers":1,"resolvesource":1,"return":3,"run":2,"runs":1,"schema":6,"see":1,"simpler":1,"slug":1,"smaller":1,"so":2,"some":1,"something":1,"source":2,"sourceauthor":1,"sourcedescription":1,"sourcedescriptiontolowercase":1,"sourcefiles0name":1,"store":1,"string":1,"sure":1,"tags":1,"that":8,"thats":1,"there":4,"thing":1,"think":1,"third":2,"this":3,"title":4,"two":1,"type":5,"types":1,"under":1,"use":4,"used":2,"using":2,"value":2,"videoshttpswwwyoutubecomplaylistlistplz8izfnkeqljd3bxecwhcpmfaada4te":1,"want":1,"was":2,"way":3,"ways":3,"we":5,"were":2,"when":1,"where":1,"which":3,"while":1,"why":1,"will":4,"wish":1,"with":4,"wont":1,"works":1,"would":1,"you":5}},"digital-garden-5":{"content":"---\ntitle: Animating Shadows\ndate: '2021-03-11T14:51:25.542Z'\ntags: ['css', 'shadows', 'animation']\n---\n\nimport './style.css'\n\nAnimation on the web can be a tricky thing. If you animate the wrong css property your UI/animation will feel choppy or janky. The safe properties to animate don't cause layout shift (causing the entire page, or large portions of the page to have to re paint or move around). Some of these properties are transform, opacity, and color (actually thats pretty much it). There are a few others, like what we are going to talk about today\n\nAnimating a box-shadow is going to give you a janky animation. However if we use the css property `filter` with the function `drop-shadow()` we can get those silky smooth shadow animations we are after.\n\n```css\n.card {\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.4));\n  transition: all 0.2s cubic-bezier(0.55, 0, 0.5, 1);\n\n  /* non animation stuff */\n  width: 150px;\n  height: 150px;\n  border-radius: 16px;\n  background: dodgerblue;\n}\n.card:hover {\n  filter: drop-shadow(0 -4px 20px rgba(0, 0, 0, 0.4));\n}\n```\n\n\u003cdiv class=\"card-container\"\u003e\n  \u003cspan\u003eHover Me!\u003c/span\u003e\n  \u003cdiv class=\"card card-1\"\u003e\u003c/div\u003e\n\u003c/div\u003e\n","heading":"title: Animating Shadows","id":"digital-garden-5","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/animating-shadows/index.mdx","tokens":{"":9,"0":6,"02s":1,"04":2,"05":1,"1":1,"150px":2,"16px":1,"20210311t145125542z":1,"20px":1,"3px":1,"4px":1,"about":1,"actually":1,"after":1,"all":1,"animate":2,"animating":2,"animation":4,"animations":1,"are":4,"around":1,"background":1,"be":1,"borderradius":1,"boxshadow":1,"can":2,"card":1,"card1div":1,"cardhover":1,"cause":1,"causing":1,"choppy":1,"classcard":1,"classcardcontainer":1,"color":1,"css":4,"cubicbezier055":1,"date":1,"div":3,"dodgerblue":1,"dont":1,"dropshadow":1,"dropshadow0":2,"entire":1,"feel":1,"few":1,"filter":3,"function":1,"get":1,"give":1,"going":2,"have":1,"height":1,"however":1,"if":2,"import":1,"is":1,"janky":2,"large":1,"layout":1,"like":1,"mespan":1,"move":1,"much":1,"non":1,"on":1,"opacity":1,"others":1,"page":2,"paint":1,"portions":1,"pretty":1,"properties":2,"property":2,"re":1,"rgba0":2,"safe":1,"shadow":1,"shadows":2,"shift":1,"silky":1,"smooth":1,"some":1,"spanhover":1,"stuff":1,"stylecss":1,"tags":1,"talk":1,"thats":1,"there":1,"these":1,"thing":1,"those":1,"title":1,"today":1,"transform":1,"transition":1,"tricky":1,"uianimation":1,"use":1,"we":4,"web":1,"what":1,"width":1,"will":1,"with":1,"wrong":1,"you":2,"your":1}},"digital-garden-6":{"content":".card {\n  transition: all 0.2s cubic-bezier(0.55, 0, 0.5, 1);\n  /* non animation stuff */\n  width: 150px;\n  height: 150px;\n  border-radius: 16px;\n  background: dodgerblue;\n  margin: 0 auto;\n}\n\n.card-1 {\n  filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.4));\n}\n.card-1:hover {\n  filter: drop-shadow(0 -4px 20px rgba(0, 0, 0, 0.4));\n}\n\n.card-container {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 8px rgb(0, 0, 0, 0.1);\n  padding: 20px;\n  margin-bottom: 20px;\n}\n.card-container span {\n  font-size: 24px;\n  display: block;\n  text-align: center;\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n","heading":"","id":"digital-garden-6","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/animating-shadows/style.css","tokens":{"":12,"0":11,"01":1,"02s":1,"04":2,"05":1,"1":1,"150px":2,"16px":1,"20px":3,"24px":1,"3px":1,"4px":2,"5px":1,"8px":2,"all":1,"animation":1,"auto":1,"background":2,"block":1,"borderradius":2,"boxshadow":1,"card":1,"card1":1,"card1hover":1,"cardcontainer":2,"center":1,"cubicbezier055":1,"display":1,"dodgerblue":1,"dropshadow0":2,"filter":2,"fontsize":1,"height":1,"margin":1,"marginbottom":2,"margintop":1,"non":1,"padding":1,"rgb0":1,"rgba0":2,"span":1,"stuff":1,"textalign":1,"transition":1,"white":1,"width":1}},"digital-garden-7":{"content":"---\ntitle: Aspect Ratios With CSS\ndate: '2021-03-05T14:09:39.534Z'\ntags: ['css', 'aspect-ratio', 'iframes']\n---\n\nSizing iframes with that have videos has always been something that is difficult. In the past you might have brought in some library like Dave Rupert's jQuery plugin fitvids. However there is a new css property coming to browsers or is already implemented called `aspect-ratio` this allows you to set the ratio in the css and the element will always retain that width and height ratio.\n\n```css\niframe{\n  width:100%;\n  aspect-ratio:16/9 /*the ratio for most videos*/\n}\n```\nand your done easy as that.\n\nHowever this is a really new property and may not be able to be used in production just yet without fallbacks. So if you need a fallback, and you just want a css solution than this is the css that fitvid's inserts on to the page that you can just put in your stylesheet and you may not need the library.\n\n```css\niframe {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n}\n.iframe-wrapper {\n  position: relative;\n  width: 100%;\n  height: 0;\n  padding-top: calc((9 / 16) * 100%); /*ratio for most videos*/\n}\n```\n\n","heading":"title: Aspect Ratios With CSS","id":"digital-garden-7","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/aspect-ratios-with-css/index.md","tokens":{"":11,"0":3,"100":4,"16":1,"20210305t140939534z":1,"able":1,"absolute":1,"allows":1,"already":1,"always":2,"as":1,"aspect":1,"aspectratio":2,"aspectratio169":1,"be":2,"been":1,"brought":1,"browsers":1,"calc9":1,"called":1,"can":1,"coming":1,"css":8,"date":1,"dave":1,"difficult":1,"done":1,"easy":1,"element":1,"fallback":1,"fallbacks":1,"fitvids":2,"for":2,"have":2,"height":3,"however":2,"if":1,"iframe":2,"iframes":2,"iframewrapper":1,"implemented":1,"inserts":1,"is":5,"jquery":1,"just":3,"left":1,"library":2,"like":1,"may":2,"might":1,"most":2,"need":2,"new":2,"not":2,"on":1,"paddingtop":1,"page":1,"past":1,"plugin":1,"position":2,"production":1,"property":2,"put":1,"ratio":4,"ratios":1,"really":1,"relative":1,"retain":1,"ruperts":1,"set":1,"sizing":1,"so":1,"solution":1,"some":1,"something":1,"stylesheet":1,"tags":1,"than":1,"that":6,"there":1,"this":3,"title":1,"top":1,"used":1,"videos":3,"want":1,"width":3,"width100":1,"will":1,"with":2,"without":1,"yet":1,"you":6,"your":2}},"digital-garden-8":{"content":"---\ntitle: Writing Colorful console logs in node\ndate: '2021-06-18T12:05:21.263Z'\ntags: ['js', 'console', 'debugging', 'node', 'ASCII']\n---\n\nGetting stylish in console logs in the browser is easy and fun because you can just use css. See this [brain dump](/brain/fancy-console-logs/) for how to do stylish console.logs in the browser. How ever in node we arent outputting to a browser that can understand css, but a text based stdout terminal emulator. We have to use 'ANSI escape sequences'. Here is an example of what that lookis like.\n\n```js\nconsole.log(\n  //styles\n  '\\x1b[32m%s \\x1b[0m',\n  //text\n  'I am green'\n)\n```\n\n#### Outputs\n\n![example of outputting green text](iamgreenexample.png)\n\nThis is very gross and not readable, but here is whats going on. The first part `\\x1b` is the escape sequence, telling the emulator your about to change the color (more or less to be honest im not exactly sure). The next part you declare the color `[32`. That apparently is green. Then the letter `m`, which means we are done declaring our color. Here is a [wikipedia article](https://en.wikipedia.org/wiki/ANSI_escape_code) that shows a full list of the codes. The next part is `%s`, this is just putting a place holder for our text to go. The last part is `\\x1b[0m`. We see we are declaring another escape sequence, and then its another color `[0m`. This is a reset. We are resetting the color back to the default.\n\nWhat about background colors? We can also set a background color. Here is what that looks like.\n\n```js\nconsole.log(\n  //styles\n  '\\x1b[32m\\x1b[41m %s \\x1b[0m',\n  //text\n  'I am green with red background'\n)\n```\n\n#### Outputs\n\n![example of outputting green text with a red background](greentextredbackground.png)\n\nEverything is the same except we added an additional color before our text placeholder. The [Wikipedia article](https://en.wikipedia.org/wiki/ANSI_escape_code) also has a list of available background colors you can use.\n\nMemorizing those strange color codes is not ideal. Some terminal emulators can support RGB. This to me makes the most sense. It has a slightly different syntax. It looks like this.\n\n```js\nconsole.log(\n  //styles\n  '\\x1b[38;2;255;0;0m%s \\x1b[0m',\n  //text\n  'I am red text'\n)\n```\n\n#### Outputs\n\n![example of outputting red text with rgb color code](redtext.png)\n\nLets break this syntax down. We start off with our familiar escape sequence `\\x1b`. Now we are about to declare our color. `[38;2;`, means we are about to declare and RGB foreground (text) color. Next we declare our RGB values separated, by semicolons `255;0;0`. Then we finish our color sequence with the letter `m` just like before. If we wanted to do rgb with background color we use `48;2` instead of `[38;2;`.\n\n```js\nconsole.log(\n  //styles\n  '\\x1b[48;2;255;0;0m%s \\x1b[0m',\n  //text\n  'I have a red background'\n)\n```\n\n#### Outputs\n\n![example of outputting red background with rgb color code](redbackground.png)\n\nThere are other things you can do to style your text like make it bold, brighter or dimmer. If you are interested in more digging in to this [Wikipedia article](https://en.wikipedia.org/wiki/ANSI_escape_code) is a good place to start.\n","heading":"title: Writing Colorful console logs in node","id":"digital-garden-8","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/colorful-console-logs-in-node/index.md","tokens":{"":14,"0m":1,"20210618t120521263z":1,"25500":1,"32":1,"382":2,"482":1,"about":4,"added":1,"additional":1,"also":2,"am":3,"another":2,"ansi":1,"apparently":1,"are":7,"arent":1,"articlehttpsenwikipediaorgwikiansiescapecode":3,"ascii":1,"available":1,"back":1,"background":7,"backgroundgreentextredbackgroundpng":1,"based":1,"be":1,"because":1,"before":2,"bold":1,"brain":1,"break":1,"brighter":1,"browser":3,"but":2,"by":1,"can":6,"change":1,"coderedbackgroundpng":1,"coderedtextpng":1,"codes":2,"color":14,"colorful":1,"colors":2,"console":3,"consolelog":4,"consolelogs":1,"css":2,"date":1,"debugging":1,"declare":4,"declaring":2,"default":1,"different":1,"digging":1,"dimmer":1,"do":3,"done":1,"down":1,"dumpbrainfancyconsolelogs":1,"easy":1,"emulator":2,"emulators":1,"escape":4,"ever":1,"everything":1,"exactly":1,"example":5,"except":1,"familiar":1,"finish":1,"first":1,"for":2,"foreground":1,"full":1,"fun":1,"getting":1,"go":1,"going":1,"good":1,"green":5,"gross":1,"have":2,"here":4,"holder":1,"honest":1,"how":2,"i":4,"ideal":1,"if":2,"im":1,"instead":1,"interested":1,"is":15,"its":1,"js":5,"just":3,"last":1,"less":1,"lets":1,"letter":2,"like":5,"list":2,"logs":2,"lookis":1,"looks":2,"m":2,"make":1,"makes":1,"me":1,"means":2,"memorizing":1,"more":2,"most":1,"next":3,"node":3,"not":3,"now":1,"off":1,"on":1,"other":1,"our":7,"outputs":4,"outputting":5,"part":4,"place":2,"placeholder":1,"putting":1,"readable":1,"red":6,"reset":1,"resetting":1,"rgb":6,"s":2,"same":1,"see":2,"semicolons":1,"sense":1,"separated":1,"sequence":4,"sequences":1,"set":1,"shows":1,"slightly":1,"some":1,"start":2,"stdout":1,"strange":1,"style":1,"styles":4,"stylish":2,"support":1,"sure":1,"syntax":2,"tags":1,"telling":1,"terminal":2,"text":12,"textiamgreenexamplepng":1,"that":5,"there":1,"things":1,"this":8,"those":1,"title":1,"understand":1,"use":4,"values":1,"very":1,"wanted":1,"we":15,"what":3,"whats":1,"which":1,"wikipedia":3,"with":7,"writing":1,"x1b":2,"x1b0m":5,"x1b32ms":1,"x1b32mx1b41m":1,"x1b38225500ms":1,"x1b48225500ms":1,"you":5,"your":2}},"digital-garden-9":{"content":"---\ntitle: Copy to Clipboard from Commandline\ndate: '2021-02-25T20:59:08.094Z'\ntags: [\"linux\", \"clipboard\"]\n---\n\nYou can automatically copy to clipboard from linux by using `pbcopy`\n\n```zsh\n  cat package.json | pbcopy\n```\n\n","heading":"title: Copy to Clipboard from Commandline","id":"digital-garden-9","path":"/Users/joshkennedy00/sites/joshs/sandbox/content/brain/copy-to-clipboard-from-commandline/index.md","tokens":{"":4,"20210225t205908094z":1,"automatically":1,"by":1,"can":1,"cat":1,"clipboard":3,"commandline":1,"copy":2,"date":1,"from":2,"linux":2,"packagejson":1,"pbcopy":2,"tags":1,"title":1,"using":1,"you":1,"zsh":1}}}